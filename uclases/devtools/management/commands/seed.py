"""
Management command para poblar la base de datos con datos de prueba
Ejecutar con: python manage.py seed
O en producci√≥n: python manage.py seed --force
"""

from django.core.management.base import BaseCommand
from django.conf import settings
from django.db import transaction
from django.contrib.auth import get_user_model
from django.db.models import Count
import random
from datetime import time

from courses.models import Ramo, Carrera, OfertaClase, SolicitudClase, PerfilRamo, HorarioOfertado
from courses.enums import DiaSemana
from accounts.models import Perfil

User = get_user_model()


class Command(BaseCommand):
    help = "Poblar la base de datos con datos de prueba (idempotente - puede ejecutarse m√∫ltiples veces)"

    def add_arguments(self, parser):
        parser.add_argument(
            "--force",
            action="store_true",
            help="Permitir ejecuci√≥n fuera de modo DEBUG"
        )

    @transaction.atomic
    def handle(self, *args, **opts):
        # Verificar si estamos en DEBUG o si se pas√≥ --force
        if not settings.DEBUG and not opts["force"]:
            self.stderr.write(
                self.style.ERROR(
                    "‚ùå Negado: Este comando solo se ejecuta en DEBUG=True. "
                    "Use --force para ejecutar en producci√≥n."
                )
            )
            return

        self.stdout.write(self.style.SUCCESS("üöÄ Iniciando poblaci√≥n de base de datos..."))

        # ============================================
        # 1. CREAR CARRERAS
        # ============================================
        self.stdout.write("\nüìö Creando carreras...")
        carreras_data = [
            "Ingenier√≠a Civil en Computaci√≥n",
            "Ingenier√≠a Civil Industrial",
            "Ingenier√≠a Civil El√©ctrica",
            "Ingenier√≠a Civil Mec√°nica",
            "Ingenier√≠a Civil Matem√°tica",
            "Licenciatura en Ciencias de la Computaci√≥n",
            "Ingenier√≠a Civil",
            "Ingenier√≠a Comercial",
        ]

        carreras = []
        for nombre in carreras_data:
            carrera, created = Carrera.objects.get_or_create(name=nombre)
            carreras.append(carrera)
            if created:
                self.stdout.write(f"  ‚úÖ Creada: {nombre}")
            else:
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è  Ya existe: {nombre}"))

        # ============================================
        # 2. CREAR RAMOS
        # ============================================
        self.stdout.write("\nüìñ Creando ramos...")
        ramos_data = [
            # Matem√°ticas
            "√Ålgebra Lineal",
            "C√°lculo I",
            "C√°lculo II",
            "C√°lculo III",
            "Ecuaciones Diferenciales",
            "√Ålgebra Abstracta",
            "Probabilidades y Estad√≠stica",
            "An√°lisis Num√©rico",
            # F√≠sica
            "F√≠sica I",
            "F√≠sica II",
            "F√≠sica III",
            "F√≠sica Experimental",
            # Computaci√≥n
            "Programaci√≥n",
            "Estructuras de Datos",
            "Algoritmos",
            "Bases de Datos",
            "Ingenier√≠a de Software",
            "Sistemas Operativos",
            "Redes de Computadores",
            "Inteligencia Artificial",
            "Machine Learning",
            "Desarrollo Web",
            # Otros
            "Qu√≠mica General",
            "Econom√≠a",
            "Gesti√≥n de Proyectos",
            "Ingl√©s T√©cnico",
        ]

        ramos = []
        for nombre in ramos_data:
            ramo, created = Ramo.objects.get_or_create(name=nombre)
            ramos.append(ramo)
            if created:
                self.stdout.write(f"  ‚úÖ Creado: {nombre}")

        # ============================================
        # 3. CREAR USUARIOS PROFESORES
        # ============================================
        self.stdout.write("\nüë®‚Äçüè´ Creando profesores...")
        profesores_data = [
            {"username": "profMatematicas", "email": "mat@uclases.cl", "first_name": "Carlos", "last_name": "Mart√≠nez", "carrera": carreras[4]},
            {"username": "profFisica", "email": "fis@uclases.cl", "first_name": "Laura", "last_name": "Gonz√°lez", "carrera": carreras[2]},
            {"username": "profProgramacion", "email": "prog@uclases.cl", "first_name": "Diego", "last_name": "Rodr√≠guez", "carrera": carreras[0]},
            {"username": "profAlgoritmos", "email": "algo@uclases.cl", "first_name": "Mar√≠a", "last_name": "Silva", "carrera": carreras[5]},
            {"username": "profBaseDatos", "email": "bd@uclases.cl", "first_name": "Roberto", "last_name": "Fern√°ndez", "carrera": carreras[0]},
            {"username": "profIA", "email": "ia@uclases.cl", "first_name": "Andrea", "last_name": "L√≥pez", "carrera": carreras[0]},
            {"username": "profWeb", "email": "web@uclases.cl", "first_name": "Felipe", "last_name": "Torres", "carrera": carreras[0]},
        ]

        profesores = []
        for data in profesores_data:
            if User.objects.filter(username=data["username"]).exists():
                user = User.objects.get(username=data["username"])
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è  Ya existe: {data['username']}"))
            else:
                user = User.objects.create_user(
                    username=data["username"],
                    email=data["email"],
                    password="password123",
                    first_name=data["first_name"],
                    last_name=data["last_name"]
                )
                self.stdout.write(f"  ‚úÖ Creado: {data['username']} ({data['first_name']} {data['last_name']})")
            
            # Actualizar perfil
            perfil = user.perfil
            perfil.carrera = data["carrera"]
            perfil.descripcion = f"Profesor con experiencia en {data['carrera'].name}. Disponible para clases particulares."
            perfil.telefono = f"+5691234567{len(profesores)}"
            perfil.save()
            profesores.append(perfil)

        # ============================================
        # 4. CREAR USUARIOS ESTUDIANTES
        # ============================================
        self.stdout.write("\nüë®‚Äçüéì Creando estudiantes...")
        estudiantes_data = [
            {"username": "juan_perez", "email": "juan@uclases.cl", "first_name": "Juan", "last_name": "P√©rez", "carrera": carreras[0]},
            {"username": "ana_garcia", "email": "ana@uclases.cl", "first_name": "Ana", "last_name": "Garc√≠a", "carrera": carreras[1]},
            {"username": "pedro_sanchez", "email": "pedro@uclases.cl", "first_name": "Pedro", "last_name": "S√°nchez", "carrera": carreras[0]},
            {"username": "sofia_rojas", "email": "sofia@uclases.cl", "first_name": "Sof√≠a", "last_name": "Rojas", "carrera": carreras[5]},
            {"username": "diego_munoz", "email": "diego@uclases.cl", "first_name": "Diego", "last_name": "Mu√±oz", "carrera": carreras[2]},
            {"username": "valentina_castro", "email": "vale@uclases.cl", "first_name": "Valentina", "last_name": "Castro", "carrera": carreras[0]},
            {"username": "matias_vera", "email": "matias@uclases.cl", "first_name": "Mat√≠as", "last_name": "Vera", "carrera": carreras[3]},
            {"username": "camila_flores", "email": "camila@uclases.cl", "first_name": "Camila", "last_name": "Flores", "carrera": carreras[1]},
            {"username": "nicolas_herrera", "email": "nico@uclases.cl", "first_name": "Nicol√°s", "last_name": "Herrera", "carrera": carreras[4]},
            {"username": "isidora_pino", "email": "isi@uclases.cl", "first_name": "Isidora", "last_name": "Pino", "carrera": carreras[0]},
        ]

        estudiantes = []
        for data in estudiantes_data:
            if User.objects.filter(username=data["username"]).exists():
                user = User.objects.get(username=data["username"])
                self.stdout.write(self.style.WARNING(f"  ‚ö†Ô∏è  Ya existe: {data['username']}"))
            else:
                user = User.objects.create_user(
                    username=data["username"],
                    email=data["email"],
                    password="password123",
                    first_name=data["first_name"],
                    last_name=data["last_name"]
                )
                self.stdout.write(f"  ‚úÖ Creado: {data['username']} ({data['first_name']} {data['last_name']})")
            
            # Actualizar perfil
            perfil = user.perfil
            perfil.carrera = data["carrera"]
            perfil.descripcion = f"Estudiante de {data['carrera'].name}. Buscando mejorar mis conocimientos."
            perfil.telefono = f"+5698765432{len(estudiantes)}"
            perfil.save()
            estudiantes.append(perfil)

        # ============================================
        # 5. ASIGNAR RAMOS CURSADOS A PROFESORES
        # ============================================
        self.stdout.write("\nüìù Asignando ramos cursados a profesores...")
        ramos_por_profesor = {
            0: [0, 1, 2, 3, 4, 6],  # profMatematicas
            1: [8, 9, 10, 11],      # profFisica
            2: [12, 13, 14],        # profProgramacion
            3: [13, 14, 15, 17],    # profAlgoritmos
            4: [15, 16],            # profBaseDatos
            5: [19, 20],            # profIA
            6: [21, 16],            # profWeb
        }

        for prof_idx, ramos_indices in ramos_por_profesor.items():
            if prof_idx < len(profesores):
                for ramo_idx in ramos_indices:
                    if ramo_idx < len(ramos):
                        PerfilRamo.objects.get_or_create(
                            perfil=profesores[prof_idx],
                            ramo=ramos[ramo_idx]
                        )
                self.stdout.write(f"  ‚úÖ Asignados {len(ramos_indices)} ramos a {profesores[prof_idx].user.username}")

        # ============================================
        # 6. ASIGNAR RAMOS CURSADOS A ESTUDIANTES
        # ============================================
        self.stdout.write("\nüìù Asignando ramos cursados a estudiantes...")
        for estudiante in estudiantes:
            num_ramos = random.randint(3, 8)
            ramos_estudiante = random.sample(ramos[:15], num_ramos)
            
            for ramo in ramos_estudiante:
                PerfilRamo.objects.get_or_create(
                    perfil=estudiante,
                    ramo=ramo
                )
            self.stdout.write(f"  ‚úÖ Asignados {num_ramos} ramos a {estudiante.user.username}")

        # ============================================
        # 7. CREAR OFERTAS DE CLASES
        # ============================================
        self.stdout.write("\nüíº Creando ofertas de clases...")
        
        # Primero, limpiar duplicados existentes
        # Encontrar ofertas duplicadas y mantener solo la m√°s reciente
        duplicates = OfertaClase.objects.values('profesor', 'titulo').annotate(
            count=Count('id')
        ).filter(count__gt=1)
        
        for dup in duplicates:
            ofertas_dup = OfertaClase.objects.filter(
                profesor=dup['profesor'],
                titulo=dup['titulo']
            ).order_by('-fecha_publicacion')
            # Mantener la primera (m√°s reciente), eliminar el resto
            to_delete = ofertas_dup[1:]
            for oferta in to_delete:
                oferta.delete()
            self.stdout.write(self.style.WARNING(f"  üßπ Limpiadas ofertas duplicadas: {dup['titulo'][:40]}..."))
        
        ofertas_data = [
            {
                "profesor": profesores[0],
                "titulo": "Clases de C√°lculo I - Preparaci√≥n para cert√°menes",
                "descripcion": "Ofrezco clases de C√°lculo I con enfoque en preparaci√≥n para cert√°menes. Incluye resoluci√≥n de ejercicios tipo prueba, revisi√≥n de materia y tips para optimizar el tiempo en evaluaciones. 3 a√±os de experiencia ayudando estudiantes.",
                "ramos": [ramos[1]],
            },
            {
                "profesor": profesores[0],
                "titulo": "√Ålgebra Lineal - Desde cero hasta avanzado",
                "descripcion": "¬øProblemas con matrices, vectores o espacios vectoriales? Te ayudo con una metodolog√≠a clara y ejemplos pr√°cticos. Incluyo material complementario y ejercicios resueltos.",
                "ramos": [ramos[0]],
            },
            {
                "profesor": profesores[1],
                "titulo": "F√≠sica I y II - Mec√°nica y Electricidad",
                "descripcion": "Clases particulares de F√≠sica para ingenier√≠a. √ânfasis en comprensi√≥n conceptual y resoluci√≥n de problemas. Disponibilidad fines de semana.",
                "ramos": [ramos[8], ramos[9]],
            },
            {
                "profesor": profesores[2],
                "titulo": "Programaci√≥n en Python - Nivel b√°sico a intermedio",
                "descripcion": "Aprende Python desde cero: variables, estructuras de control, funciones, POO, y m√°s. Incluye proyectos pr√°cticos y c√≥digo comentado. Ideal para CC1002 o CC3001.",
                "ramos": [ramos[12]],
            },
            {
                "profesor": profesores[2],
                "titulo": "Estructuras de Datos - Listas, √°rboles, grafos",
                "descripcion": "Domina las estructuras de datos fundamentales. Implementaci√≥n en Python/Java, an√°lisis de complejidad y aplicaciones pr√°cticas. Material de apoyo incluido.",
                "ramos": [ramos[13]],
            },
            {
                "profesor": profesores[3],
                "titulo": "Algoritmos - Preparaci√≥n intensiva",
                "descripcion": "Curso completo de algoritmos: ordenamiento, b√∫squeda, recursi√≥n, programaci√≥n din√°mica, greedy. Incluye ejercicios de competencias de programaci√≥n.",
                "ramos": [ramos[14]],
            },
            {
                "profesor": profesores[4],
                "titulo": "Bases de Datos - SQL y dise√±o",
                "descripcion": "Aprende SQL desde consultas b√°sicas hasta queries complejas. Tambi√©n cubrimos normalizaci√≥n, dise√±o ER, y optimizaci√≥n de consultas. PostgreSQL y MySQL.",
                "ramos": [ramos[15]],
            },
            {
                "profesor": profesores[5],
                "titulo": "Introducci√≥n a Machine Learning con Python",
                "descripcion": "Aprende los fundamentos de ML: regresi√≥n, clasificaci√≥n, clustering. Usamos scikit-learn, pandas y numpy. Proyectos con datasets reales.",
                "ramos": [ramos[20]],
            },
            {
                "profesor": profesores[6],
                "titulo": "Desarrollo Web Full-Stack - Django + React",
                "descripcion": "Crea aplicaciones web completas desde cero. Backend con Django REST Framework, frontend con React. Incluye despliegue en producci√≥n.",
                "ramos": [ramos[21]],
            },
            {
                "profesor": profesores[0],
                "titulo": "Matem√°ticas para Ingenier√≠a - Paquete completo",
                "descripcion": "Clases de C√°lculo I, II, III y Ecuaciones Diferenciales. Ideal para estudiantes que necesitan reforzar toda la l√≠nea de c√°lculo. Descuento por paquete.",
                "ramos": [ramos[1], ramos[2], ramos[3], ramos[4]],
            },
        ]

        ofertas_creadas = []
        for data in ofertas_data:
            oferta, created = OfertaClase.objects.update_or_create(
                profesor=data["profesor"],
                titulo=data["titulo"],
                defaults={"descripcion": data["descripcion"]}
            )
            oferta.ramos.set(data["ramos"])
            ofertas_creadas.append(oferta)
            status = "‚úÖ Creada" if created else "‚ôªÔ∏è  Actualizada"
            self.stdout.write(f"  {status}: {data['titulo'][:50]}... por {data['profesor'].user.username}")

        # ============================================
        # 7.1. ASIGNAR HORARIOS A LAS OFERTAS
        # ============================================
        self.stdout.write("\n‚è∞ Asignando horarios a ofertas...")
        
        # Definir rangos de horarios t√≠picos
        horarios_disponibles = [
            (time(8, 0), time(10, 0)),   # 8:00 - 10:00
            (time(10, 0), time(12, 0)),  # 10:00 - 12:00
            (time(12, 0), time(14, 0)),  # 12:00 - 14:00
            (time(14, 0), time(16, 0)),  # 14:00 - 16:00
            (time(16, 0), time(18, 0)),  # 16:00 - 18:00
            (time(18, 0), time(20, 0)),  # 18:00 - 20:00
            (time(20, 0), time(22, 0)),  # 20:00 - 22:00
        ]
        
        for oferta in ofertas_creadas:
            # Eliminar horarios anteriores para hacer idempotente
            oferta.horarios.all().delete()
            
            # Asignar entre 2 y 4 horarios aleatorios
            num_horarios = random.randint(2, 4)
            dias_usados = set()
            
            for _ in range(num_horarios):
                # Elegir un d√≠a que no se haya usado a√∫n
                dias_disponibles = [d for d in DiaSemana.values if d not in dias_usados]
                if not dias_disponibles:
                    break
                    
                dia = random.choice(dias_disponibles)
                dias_usados.add(dia)
                
                # Elegir un horario aleatorio
                hora_inicio, hora_fin = random.choice(horarios_disponibles)
                
                # Crear el horario
                HorarioOfertado.objects.create(
                    oferta=oferta,
                    dia=dia,
                    hora_inicio=hora_inicio,
                    hora_fin=hora_fin,
                    cupos_totales=random.randint(1, 5)
                )
            
            dia_nombres = [DiaSemana(d).label for d in sorted(dias_usados)]
            self.stdout.write(f"  ‚úÖ Asignados {len(dias_usados)} horarios a '{oferta.titulo[:40]}...' ({', '.join(dia_nombres)})")

        # ============================================
        # 8. CREAR SOLICITUDES DE CLASES
        # ============================================
        self.stdout.write("\nüîç Creando solicitudes de clases...")
        
        # Limpiar solicitudes duplicadas
        duplicates_solicitudes = SolicitudClase.objects.values('solicitante', 'titulo').annotate(
            count=Count('id')
        ).filter(count__gt=1)
        
        for dup in duplicates_solicitudes:
            solicitudes_dup = SolicitudClase.objects.filter(
                solicitante=dup['solicitante'],
                titulo=dup['titulo']
            ).order_by('-fecha_publicacion')
            # Mantener la primera (m√°s reciente), eliminar el resto
            to_delete = solicitudes_dup[1:]
            for solicitud in to_delete:
                solicitud.delete()
            self.stdout.write(self.style.WARNING(f"  üßπ Limpiadas solicitudes duplicadas: {dup['titulo'][:40]}..."))
        
        solicitudes_data = [
            {
                "solicitante": estudiantes[0],
                "titulo": "Busco profesor de C√°lculo II urgente",
                "descripcion": "Tengo certamen la pr√≥xima semana y necesito ayuda con integrales m√∫ltiples y series. Disponibilidad inmediata, presencial o online.",
                "ramo": ramos[2],
            },
            {
                "solicitante": estudiantes[1],
                "titulo": "Necesito clases de Programaci√≥n para examen",
                "descripcion": "Busco profesor que me ayude a preparar el examen de Programaci√≥n (Python). Necesito reforzar recursi√≥n y POO principalmente.",
                "ramo": ramos[12],
            },
            {
                "solicitante": estudiantes[2],
                "titulo": "Ayuda con proyecto de Bases de Datos",
                "descripcion": "Necesito apoyo para dise√±ar el modelo ER de mi proyecto final. Incluye normalizaci√≥n y optimizaci√≥n de consultas SQL.",
                "ramo": ramos[15],
            },
            {
                "solicitante": estudiantes[3],
                "titulo": "Clases de Algoritmos - Programaci√≥n Din√°mica",
                "descripcion": "Estoy con problemas en programaci√≥n din√°mica y algoritmos greedy. Busco alguien con experiencia en competencias de programaci√≥n.",
                "ramo": ramos[14],
            },
            {
                "solicitante": estudiantes[4],
                "titulo": "F√≠sica II - Electricidad y Magnetismo",
                "descripcion": "Necesito clases de la parte de electricidad de F√≠sica II. Leyes de Kirchhoff, circuitos RC, RL, RLC. Preferiblemente presencial.",
                "ramo": ramos[9],
            },
            {
                "solicitante": estudiantes[5],
                "titulo": "√Ålgebra Lineal - Espacios Vectoriales",
                "descripcion": "Me cuesta mucho entender espacios vectoriales, transformaciones lineales y valores propios. Busco explicaciones claras con ejemplos.",
                "ramo": ramos[0],
            },
            {
                "solicitante": estudiantes[6],
                "titulo": "Desarrollo Web - Necesito ayuda con Django",
                "descripcion": "Estoy desarrollando una aplicaci√≥n con Django y tengo problemas con autenticaci√≥n y manejo de sesiones. Busco mentor√≠a t√©cnica.",
                "ramo": ramos[21],
            },
            {
                "solicitante": estudiantes[7],
                "titulo": "Estructuras de Datos - √Årboles y Grafos",
                "descripcion": "Necesito reforzar implementaci√≥n de √°rboles binarios, AVL y algoritmos de grafos (BFS, DFS, Dijkstra). C√≥digo en Java.",
                "ramo": ramos[13],
            },
            {
                "solicitante": estudiantes[8],
                "titulo": "Ecuaciones Diferenciales - Laplace y Fourier",
                "descripcion": "Tengo problemas con transformada de Laplace y series de Fourier. Busco alguien que explique bien la teor√≠a y aplicaciones.",
                "ramo": ramos[4],
            },
            {
                "solicitante": estudiantes[9],
                "titulo": "Machine Learning - Proyecto final",
                "descripcion": "Necesito ayuda con mi proyecto final de ML. Tengo que implementar un clasificador con redes neuronales en TensorFlow.",
                "ramo": ramos[20],
            },
        ]

        for data in solicitudes_data:
            solicitud, created = SolicitudClase.objects.update_or_create(
                solicitante=data["solicitante"],
                titulo=data["titulo"],
                defaults={
                    "descripcion": data["descripcion"],
                    "ramo": data["ramo"]
                }
            )
            status = "‚úÖ Creada" if created else "‚ôªÔ∏è  Actualizada"
            self.stdout.write(f"  {status}: {data['titulo'][:50]}... por {data['solicitante'].user.username}")

        # ============================================
        # 9. CREAR USUARIOS QUE DAN Y SOLICITAN CLASES
        # ============================================
        self.stdout.write("\nüîÑ Creando usuarios que ofrecen Y solicitan clases...")

        # Profesores que tambi√©n solicitan
        solicitudes_profesores = [
            {
                "solicitante": profesores[2],
                "titulo": "Busco ayuda con Machine Learning avanzado",
                "descripcion": "Quiero aprender sobre redes neuronales profundas y transformers. Busco alguien con experiencia en investigaci√≥n de ML.",
                "ramo": ramos[20],
            },
            {
                "solicitante": profesores[0],
                "titulo": "Necesito clases de Desarrollo Web moderno",
                "descripcion": "Quiero aprender React y frameworks modernos para crear aplicaciones educativas. Tengo conocimientos b√°sicos de HTML/CSS.",
                "ramo": ramos[21],
            },
            {
                "solicitante": profesores[4],
                "titulo": "Ayuda con Sistemas Operativos",
                "descripcion": "Necesito reforzar conceptos de concurrencia y sincronizaci√≥n para un proyecto. Threads, sem√°foros, deadlocks.",
                "ramo": ramos[17],
            },
        ]

        for data in solicitudes_profesores:
            solicitud, created = SolicitudClase.objects.update_or_create(
                solicitante=data["solicitante"],
                titulo=data["titulo"],
                defaults={
                    "descripcion": data["descripcion"],
                    "ramo": data["ramo"]
                }
            )
            status = "‚úÖ Creada" if created else "‚ôªÔ∏è  Actualizada"
            self.stdout.write(f"  {status}: Profesor solicita - {data['titulo'][:40]}... por {data['solicitante'].user.username}")

        # Estudiantes que tambi√©n ofrecen
        ofertas_estudiantes = [
            {
                "profesor": estudiantes[0],
                "titulo": "Clases de Programaci√≥n b√°sica - Ayudante certificado",
                "descripcion": "Soy ayudante del curso de Programaci√≥n. Ofrezco clases de reforzamiento en Python, ideal para principiantes. M√©todos did√°cticos y paciencia.",
                "ramos": [ramos[12]],
            },
            {
                "profesor": estudiantes[3],
                "titulo": "Algoritmos y Estructuras de Datos - Competitiva",
                "descripcion": "Tengo experiencia en competencias de programaci√≥n (ACM-ICPC). Te ayudo con algoritmos complejos y estructuras de datos avanzadas.",
                "ramos": [ramos[13], ramos[14]],
            },
            {
                "profesor": estudiantes[5],
                "titulo": "F√≠sica b√°sica - Estudiante de Ingenier√≠a",
                "descripcion": "Estudio Ingenier√≠a Civil en Computaci√≥n y tengo buen manejo de F√≠sica I. Puedo ayudarte con mec√°nica cl√°sica y cinem√°tica.",
                "ramos": [ramos[8]],
            },
            {
                "profesor": estudiantes[8],
                "titulo": "C√°lculo y √Ålgebra - Estudiante avanzado",
                "descripcion": "Curso 4to a√±o de Ingenier√≠a Matem√°tica. Ofrezco clases de C√°lculo I, II y √Ålgebra Lineal con enfoque en teor√≠a y ejercicios.",
                "ramos": [ramos[0], ramos[1], ramos[2]],
            },
        ]

        ofertas_estudiantes_creadas = []
        for data in ofertas_estudiantes:
            oferta, created = OfertaClase.objects.update_or_create(
                profesor=data["profesor"],
                titulo=data["titulo"],
                defaults={"descripcion": data["descripcion"]}
            )
            oferta.ramos.set(data["ramos"])
            ofertas_estudiantes_creadas.append(oferta)
            status = "‚úÖ Creada" if created else "‚ôªÔ∏è  Actualizada"
            self.stdout.write(f"  {status}: Estudiante ofrece - {data['titulo'][:40]}... por {data['profesor'].user.username}")

        # Asignar horarios a ofertas de estudiantes
        self.stdout.write("\n‚è∞ Asignando horarios a ofertas de estudiantes...")
        for oferta in ofertas_estudiantes_creadas:
            # Eliminar horarios anteriores
            oferta.horarios.all().delete()
            
            # Asignar entre 2 y 3 horarios
            num_horarios = random.randint(2, 3)
            dias_usados = set()
            
            for _ in range(num_horarios):
                dias_disponibles = [d for d in DiaSemana.values if d not in dias_usados]
                if not dias_disponibles:
                    break
                    
                dia = random.choice(dias_disponibles)
                dias_usados.add(dia)
                
                hora_inicio, hora_fin = random.choice(horarios_disponibles)
                
                HorarioOfertado.objects.create(
                    oferta=oferta,
                    dia=dia,
                    hora_inicio=hora_inicio,
                    hora_fin=hora_fin,
                    cupos_totales=random.randint(1, 3)
                )
            
            dia_nombres = [DiaSemana(d).label for d in sorted(dias_usados)]
            self.stdout.write(f"  ‚úÖ Asignados {len(dias_usados)} horarios a '{oferta.titulo[:40]}...' ({', '.join(dia_nombres)})")

        # ============================================
        # RESUMEN FINAL
        # ============================================
        self.stdout.write("\n" + "="*60)
        self.stdout.write(self.style.SUCCESS("‚úÖ POBLACI√ìN COMPLETADA"))
        self.stdout.write("="*60)
        self.stdout.write(f"üìö Carreras en BD: {Carrera.objects.count()}")
        self.stdout.write(f"üìñ Ramos en BD: {Ramo.objects.count()}")
        self.stdout.write(f"üë• Usuarios totales: {User.objects.count()}")
        self.stdout.write(f"   - Profesores: {len(profesores)}")
        self.stdout.write(f"   - Estudiantes: {len(estudiantes)}")
        self.stdout.write(f"üíº Ofertas en BD: {OfertaClase.objects.count()}")
        self.stdout.write(f"üîç Solicitudes en BD: {SolicitudClase.objects.count()}")
        self.stdout.write(f"üìù Ramos cursados asignados: {PerfilRamo.objects.count()}")
        self.stdout.write(f"‚è∞ Horarios ofertados: {HorarioOfertado.objects.count()}")
        self.stdout.write("\nüéâ ¬°Listo! Puedes iniciar sesi√≥n con:")
        self.stdout.write(self.style.SUCCESS("   Username: profProgramacion | Password: password123"))
        self.stdout.write(self.style.SUCCESS("   Username: juan_perez | Password: password123"))
        self.stdout.write("="*60)
